{"version":3,"sources":["ImageCard.js","ImageContainer.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","_ref","imgObj","clickHandler","react_default","a","createElement","className","name","src","img","onClick","alt","ImageContainer","imgArr","images","map","src_ImageCard","key","Form","state","changeHandler","e","_this","setState","Object","defineProperty","target","value","submitHandler","preventDefault","props","_this$state","this","onSubmit","type","placeholder","onChange","Component","App","obj","copyArr","concat","toConsumableArray","Form_Form","src_ImageContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAQeA,SANG,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAOC,EAATF,EAASE,aAAT,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQL,EAAOM,MAC7BJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAOQ,IAAKC,QAAS,kBAAIR,EAAaD,IAASU,IAAI,QCOlDC,EATU,SAAAZ,GAA2B,IAAzBE,EAAyBF,EAAzBE,aACrBW,EAD8Cb,EAAZc,OAClBC,IAAI,SAAAd,GAAM,OAAIE,EAAAC,EAAAC,cAACW,EAAD,CAAWC,IAAKhB,EAAOM,KAAMN,OAAQA,EAAQC,aAAcA,MAE7F,OACIC,EAAAC,EAAAC,cAAA,WACGQ,WCNUK,6MAEnBC,MAAM,CACJV,IAAK,GACLF,KAAM,MAGRa,cAAe,SAACC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBH,EAAEK,OAAOnB,KAAOc,EAAEK,OAAOC,WAE3CC,cAAe,SAACP,GACdA,EAAEQ,iBACFP,EAAKQ,MAAMF,cAAcN,EAAKH,OAC9BG,EAAKC,SAAS,CAAChB,KAAK,GAAGE,IAAI,8EAGrB,IAAAsB,EACaC,KAAKb,MAAjBZ,EADDwB,EACCxB,KAAKE,EADNsB,EACMtB,IACZ,OACEN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAS2B,SAAWD,KAAKJ,eACvCzB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAS4B,KAAK,OAAO3B,KAAK,MAAMoB,MAAOlB,EAAK0B,YAAY,YAAYC,SAAYJ,KAAKZ,gBAAgBjB,EAAAC,EAAAC,cAAA,WACtHF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAS4B,KAAK,OAAO3B,KAAK,OAAOoB,MAAOpB,EAAM4B,YAAY,OAAOC,SAAWJ,KAAKZ,gBAClGjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,oBAtB0B+B,aC4BnBC,6MAxBbnB,MAAQ,CACNL,OAAQ,MAGVc,cAAgB,SAAAW,GACd,IAAIC,EAAO,GAAAC,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAOF,EAAKH,MAAML,QAAlB,CAA0ByB,IACrCjB,EAAKC,SAAS,CACZT,OAAQ0B,6EAKV,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,CAAMf,cAAeI,KAAKJ,gBAC1BzB,EAAAC,EAAAC,cAACuC,EAAD,CACE9B,OAAQkB,KAAKb,MAAML,OACnBZ,aAAc8B,KAAK9B,uBAlBXmC,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f4a1219d.chunk.js","sourcesContent":["import React from 'react'\n\nconst ImageCard = ({imgObj,clickHandler}) => (\n      <div className=\"center\">\n      <h2 className=\"text\">{imgObj.name}</h2>\n      <img src={imgObj.img} onClick={()=>clickHandler(imgObj)} alt=\"\"/>\n      </div>\n    )\nexport default ImageCard\n","import React from \"react\";\nimport ImageCard from \"./ImageCard\";\n\n    const ImageContainer = ({clickHandler,images}) => {\n    let imgArr = images.map(imgObj=>((<ImageCard key={imgObj.name} imgObj={imgObj} clickHandler={clickHandler}/>)\n  ))\n    return(\n        <div>\n          {imgArr}\n        </div>\n    )\n  }\n  export default ImageContainer\n","import React,{Component} from 'react'\n\nexport default class Form extends Component{\n\n  state={\n    img: '',\n    name: ''\n  }\n\n  changeHandler =(e) =>{\n    this.setState({[e.target.name]: e.target.value})\n  }\n  submitHandler =(e) =>{\n    e.preventDefault()\n    this.props.submitHandler(this.state)\n    this.setState({name:'',img:''})\n  }\n\n  render(){\n    const {name,img} = this.state\n    return(\n      <form className=\"center\" onSubmit= {this.submitHandler}>\n        <input className=\"center\" type=\"text\" name=\"img\" value={img} placeholder=\"Enter Url\" onChange = {this.changeHandler}/><br></br>\n        <input className=\"center\" type=\"text\" name=\"name\" value={name} placeholder=\"Name\" onChange= {this.changeHandler}/>\n        <button className=\"button\">New Post</button>\n      </form>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ImageContainer from \"./ImageContainer\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  state = {\n    images: []\n  };\n\n  submitHandler = obj => {\n    let copyArr = [...this.state.images, obj];\n    this.setState({\n      images: copyArr\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Form submitHandler={this.submitHandler} />\n        <ImageContainer\n          images={this.state.images}\n          clickHandler={this.clickHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}